(() => {
  function solve(input) {
    var lines = Utils.read(input);
    var map = lines.map((i) => ("." + i + ".").split(""));
    map.unshift(Array(map[0].length).fill("."));
    map.push(Array(map[0].length).fill("."));

    // North(0), South(1), West(2), East(3)
    var firstDir = 0;
    for (var k = 0; k < 10; k++) {
      var dictMov = {};
      var dictPos = {};
      for (var i = 0; i < map.length; i++) {
        for (var j = 0; j < map[0].length; j++) {
          if (map[i][j] === "#" && countEmpty(map, i, j) < 8) {
            var found = false;
            for (var l = 0; l < 4 && !found; l++) {
              var dir = (firstDir + l) % 4;
              switch (dir) {
                case 0:
                  if (
                    map[i - 1][j - 1] == "." &&
                    map[i - 1][j] == "." &&
                    map[i - 1][j + 1] == "."
                  ) {
                    found = true;
                    dictMov[i + "," + j] = [i - 1, j];
                    dictPos[i - 1 + "," + j] = dictPos[i - 1 + "," + j]
                      ? dictPos[i - 1 + "," + j] + 1
                      : 1;
                  }
                  break;
                case 1:
                  if (
                    map[i + 1][j - 1] == "." &&
                    map[i + 1][j] == "." &&
                    map[i + 1][j + 1] == "."
                  ) {
                    found = true;
                    dictMov[i + "," + j] = [i + 1, j];
                    dictPos[i + 1 + "," + j] = dictPos[i + 1 + "," + j]
                      ? dictPos[i + 1 + "," + j] + 1
                      : 1;
                  }
                  break;
                case 2:
                  if (
                    map[i - 1][j - 1] == "." &&
                    map[i][j - 1] == "." &&
                    map[i + 1][j - 1] == "."
                  ) {
                    found = true;
                    dictMov[i + "," + j] = [i, j - 1];
                    dictPos[i + "," + (j - 1)] = dictPos[i + "," + (j - 1)]
                      ? dictPos[i + "," + (j - 1)] + 1
                      : 1;
                  }
                  break;
                case 3:
                  if (
                    map[i - 1][j + 1] == "." &&
                    map[i][j + 1] == "." &&
                    map[i + 1][j + 1] == "."
                  ) {
                    found = true;
                    dictMov[i + "," + j] = [i, j + 1];
                    dictPos[i + "," + (j + 1)] = dictPos[i + "," + (j + 1)]
                      ? dictPos[i + "," + (j + 1)] + 1
                      : 1;
                  }
                  break;
              }
            }
          }
        }
      }
      var expand = false;
      for (var el of Object.keys(dictMov)) {
        if (dictPos[dictMov[el].join(",")] < 2) {
          var [x, y] = el.split(",").map((i) => Number(i));
          var [endx, endy] = dictMov[el];
          map[x][y] = ".";
          map[endx][endy] = "#";
          if (
            endx == 0 ||
            endx == map.length ||
            endy == 0 ||
            endy == map[0].length
          ) {
            expand = true;
          }
        }
      }
      if (expand) {
        for (var line of map) {
          line.unshift(".");
          line.push(".");
        }
        map.unshift(Array(map[0].length).fill("."));
        map.push(Array(map[0].length).fill("."));
      }
      firstDir = (firstDir + 1) % 4;
    }
    var minx = Infinity;
    var miny = Infinity;
    var maxx = -Infinity;
    var maxy = -Infinity;
    var count = 0;
    for (var i = 0; i < map.length; i++) {
      for (var j = 0; j < map[0].length; j++) {
        if (map[i][j] === "#") {
          minx = Math.min(minx, i);
          miny = Math.min(miny, j);
          maxx = Math.max(maxx, i);
          maxy = Math.max(maxy, j);
          count++;
        }
      }
    }

    return (maxx - minx + 1) * (maxy - miny + 1) - count;
  }

  function countEmpty(map, i, j) {
    var count = 0;
    for (var x = i - 1; x <= i + 1; x++) {
      for (var y = j - 1; y <= j + 1; y++) {
        if (map[x][y] == ".") {
          count++;
        }
      }
    }
    return count;
  }

  var dataset = [];

  dataset.push({
    input: `....#..
..###.#
#...#.#
.#...##
#.###..
##.#.##
.#..#..`,
    output: 110
  });

  dataset.push({
    input: `..###.#####....####.......###.####.#.....##..#.##.....#.##..#.#.........#.#
.##...#.##...#.##.######.######.#######.#####.#..##...#..#....#.#.#.#...#..
#.#.#......#.#..#...#..###..###.#####..#####.#.....##.#.#...##.#.###..#..##
#..##...#####..##...#.##.#.##..##..#...#.###.###..##..####.####.#..#...##..
#.#...#..#.#####..#####..##.##...#....#.###.....##.#..###....#.#.##..#####.
#.#..#.#.#..#....#...#..##.#.##...#####.#..###..#.#.#.##...#.##.#.##..#..#.
#.####..#...####..........##.#.#....#.#.#...###.#......#.######.#..##.###..
######...#.#.######.........#.##..####.##..#.#.##....##.#.##.#.#..##.##...#
.##.#.#.###..#.#.##.#..###..##..##.#.###...#..###..#..###.####...###.##.#..
#.#..#.....##.#.#..##...##..####.####...##..#....##.##.#....#.#..#.#.#..###
..#.###..#..######.##..#.#..#.#..#.#####.##.####...##.#....#.####....##.##.
.......#.###..#.##.#.##....#....#.#...##....####..#.#.#...###.##..#.#.#.###
.####.####..#..##...##...##.####.#.#.#.#.####..##..###.##...##.##....##..#.
###..##.###..###...###....###....####...#..#######....#.#.#.#....###..##..#
##.###..######....#.##..####..#...##..#.#...#..#..#.#.#.#..#.###.###.######
#....#.#....#.#...####...#.#..##...##.#..#..#.#############....#.###....#..
#..##.#######.#..###...##...#...####.#.####.....#.....#...##.#.####.##.#.##
#.#.#..###.######.#.###.#.#####.........##....###.#####..###.#.####.#..###.
####.#.#..#.####....#######...###.#.#####.#..#.....###.#.###..#.#..###..###
##..#.#..#.....###.####..###.#...##.#....#..#..#.##....#..#.#...#.#.###..#.
########..#.....##.##.####..#####....##.#.####.###.....#.......###.##....#.
#..#.#######..#...###..#.###..###...##..#.###.##..###..#......##.###..##..#
##..###.#..#.###...##..##.#.#...#.###.##.###.#..#..#...###..#.#####..##....
##.#.#...#.#..#.#.###....#.#.#.#..#..#.###..#..#.#..##.#####.#..##.######..
##..#####..........##.##...#.....#..##.#####..##.##.#..#..#####....##...###
#..###.#.##.##..##...######..#.###..#.#.#..###.###.####.##.##.#...##..####.
#.###..###..##.#####..####.....##.#.....#..#.#...#..####.#.######.##.#.#..#
.##....#.#.##...#.#.#...##..#.....#...##..##..####.#..####.##.#.#.#..#.###.
########..#.#.#...#...##...##....##..#.....#.......##..#.#######.##.#....##
.#..#...##.#.##..##.#..#..#.#####.#.#.#..#.....##.##.....##.#.##.##.#.#.###
#..####.##.###..#...#..#.##.#########.#######...#...#..##..#.....###..#..##
##....###..#.#....##...##.####.######..####....###....########..##...###..#
.##...##.#.#.##..###.##.###..#.#..#......#######..#..##....#....###.##..#..
##..###...###..#.###.#.##.###.#...#.#.#.####.#.####..#.#..###..#####...####
#####...######.#.#..##.#.###.#.#.#...###......#.#..##..#..##...##.#########
#..#.##.....#.#####.##.....#.#..#.###.#..##.##..##..##..##..#.#..#..##.####
..###.#...#.##...##.#.....#.#####..#.#..#...#.####...#.#####.#######..#.###
..#.##..#.#..#.###.##..#...#.#....##.....#..#.#...#.##..###.###.##..###..#.
..#.#.#..#....#.#..##..#......#..#...#####.##.....#.##..##.#####.#.#...#...
.#..#.....########......##.####..#..#...##.#.###...#.#...##..#####.#..##...
#..#.#.##.#......##.#......#..####.###....#.#.##..##.....#.#.##.#####..##.#
...#...###...####..#.#.#......#.#..#..##.##..###.#...#.###..#..#...###.###.
##.##.#.........#..#..#....#..#......##.#.######.#..#.#...##.#.##..#..#..#.
.#.##..####.#..##.##....#....###...##..#.#..#.#.##.####...##..#..####....#.
.....##.#..##.#.###.....####..###.##.###.....##..##...#.#..#.##..#.##.#.#.#
##.##.#.#..........#..#.####.#..##.#..#.#.###....###.###.#.##.###.#.....#..
#..#.#.##.##..##.###..###..#.#..#..##.....#......#####.#..###.#.#.....####.
.##....###..##...#..#.######.####..#.##....#..##.#..####..##....#.....#.##.
..#.#.##....#...#.#..#.....#...###.#.#.#####...####.###.##...###.###.#.##..
#..###.#...##.#.#.#.#..#.#..#.##...#######....#.####.####.##.#######..#####
..#..#.####...#....#...#......#...#..##.#...#...#######..#..#.#####.###..##
.#.#.###...##.###....#.....####.##.####...#...........###..##...####.#..##.
.###.####.#..#....###.#.##.#.#####..#.#######.#..##.#.###...#.#..####.#.#..
..###.#....###.#.....###.#####.#.##.#..###.####.....#..#..#..##.....##.#.##
##.##.##...#....##..###.##.#...#......#.....##.#....#.#...##..##...#..####.
.###.....#....##..#####.##..#.#.....#..###..#####.#.#...##..##....#.###.#..
.##..####..#....##.#####.#.#..#.#.#.##.#..#.#....###.##.###..#....######.#.
#.###..#...##.##...####..##....#.##..###.....#.....#..##.#...###..###.....#
..#.#.##...##.##.##..#.#.##.##...##..#.###.#...######.....#.....#.....#.##.
#.#.#.##.#.#.##.###...####...####..#.....###.#..###.....#..##.#...#.###..##
#..###.##.#####..#.##...#..###.#.#.#.#....##...###.#..#####.#......##..#.#.
##.#.##...##.#####...#...#.#...#..##.##.#...#.###..##...##..##.#..##.#.###.
....####....##..#....##.#...##.#.....##.####.#..#......#.##.##....#.#..#.##
#.#.#####.##...#..#.#....#.####..#####....#.###..######..##....####..#.####
.##.#...##..####.#....##..##....#....##.#.#....#....#.##......##....#...#.#
####..#..#.#.#.#.#..###.###.##..##..#..#.####...##.#..####.........#..#.#..
.##...#..###.#.#.#.#.###.#.#.#########........###.#.#..#.....####..#..#.#.#
##..###..#.##......#.#.....#....#....#..#####.#.####..###.#.###....#.##.#..
#.#.#.##...#.....#.#..###.#..######.#..##.#.###..#.####..###.#....##.####..
.##...#..#..###.###.........##....##...#.###..#..#.#.#.#.#.###......##..##.
.##.##.##..#.######..#.##..##.#...#.##.#..###.#....#..#####.##..#..#.###...
..####.##.#..#..##..##...####.######.##.#.....##.#....#....###.##.##....###
.##......#.....#.#..#.#.##....#.#.#.####...#...##...##...#.##.#.#.#.##...##
.##.#######..#.#..#.#..##..#.#....##...#####...##..#.......##...##..##..#.#
#...#.#..#.###.#.##....##..#...#.#..##.###.......##.#.....######..#########`,
    output: 4254
  });

  Utils.check(solve, dataset, "23a");
})();
