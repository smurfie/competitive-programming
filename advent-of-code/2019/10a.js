(() => {
  function solve(input) {
    var lines = Utils.read(input);
    var m = lines.map((i) => i.split(""));
    var max = 0;

    for (var i = 0; i < m.length; i++) {
      for (var j = 0; j < m[0].length; j++) {
        if (m[i][j] == "#") {
          max = Math.max(max, count(m, i, j));
        }
      }
    }

    return max;
  }

  function count(m, i, j) {
    var sum = 0;
    for (var i2 = 0; i2 < m.length; i2++) {
      for (var j2 = 0; j2 < m[0].length; j2++) {
        if (
          m[i2][j2] == "#" &&
          (i != i2 || j != j2) &&
          visible(m, i, j, i2, j2)
        )
          sum++;
      }
    }
    return sum;
  }

  function visible(m, x1, y1, x2, y2) {
    var rx = x2 - x1;
    var ry = y2 - y1;

    if (rx == 0) {
      for (i = Math.min(y1, y2) + 1; i < Math.max(y1, y2); i++) {
        if (m[x1][i] == "#") return false;
      }
      return true;
    }
    if (ry == 0) {
      for (i = Math.min(x1, x2) + 1; i < Math.max(x1, x2); i++) {
        if (m[i][y1] == "#") return false;
      }
      return true;
    }

    var div = mcd(Math.abs(rx), Math.abs(ry));
    var ix = rx / div;
    var iy = ry / div;
    var tmpx = x1 + ix;
    var tmpy = y1 + iy;
    while (tmpx != x2) {
      if (m[tmpx][tmpy] == "#") return false;
      tmpx += ix;
      tmpy += iy;
    }
    return true;
  }

  function mcd(a, b) {
    if (b < a) [a, b] = [b, a];
    if (a == 0) return b;
    return mcd(b % a, a);
  }

  var dataset = [];

  dataset.push({
    input: `.#..#
.....
#####
....#
...##`,
    output: 8
  });

  dataset.push({
    input: `......#.#.
#..#.#....
..#######.
.#.#.###..
.#..#.....
..#....#.#
#..#....#.
.##.#..###
##...#..#.
.#....####`,
    output: 33
  });

  dataset.push({
    input: `#.#...#.#.
.###....#.
.#....#...
##.#.#.#.#
....#.#.#.
.##..###.#
..#...##..
..##....##
......#...
.####.###.`,
    output: 35
  });

  dataset.push({
    input: `.#..#..###
####.###.#
....###.#.
..###.##.#
##.##.#.#.
....###..#
..#.#..#.#
#..#.#.###
.##...##.#
.....#.#..`,
    output: 41
  });

  dataset.push({
    input: `.#..##.###...#######
##.############..##.
.#.######.########.#
.###.#######.####.#.
#####.##.#.##.###.##
..#####..#.#########
####################
#.####....###.#.#.##
##.#################
#####.##.###..####..
..######..##.#######
####.##.####...##..#
.#####..#.######.###
##...#.##########...
#.##########.#######
.####.#.###.###.#.##
....##.##.###..#####
.#.#.###########.###
#.#.#.#####.####.###
###.##.####.##.#..##`,
    output: 210
  });

  dataset.push({
    input: `.#....#.###.........#..##.###.#.....##...
...........##.......#.#...#...#..#....#..
...#....##..##.......#..........###..#...
....#....####......#..#.#........#.......
...............##..#....#...##..#...#..#.
..#....#....#..#.....#.#......#..#...#...
.....#.#....#.#...##.........#...#.......
#...##.#.#...#.......#....#........#.....
....##........#....#..........#.......#..
..##..........##.....#....#.........#....
...#..##......#..#.#.#...#...............
..#.##.........#...#.#.....#........#....
#.#.#.#......#.#...##...#.........##....#
.#....#..#.....#.#......##.##...#.......#
..#..##.....#..#.........#...##.....#..#.
##.#...#.#.#.#.#.#.........#..#...#.##...
.#.....#......##..#.#..#....#....#####...
........#...##...#.....#.......#....#.#.#
#......#..#..#.#.#....##..#......###.....
............#..#.#.#....#.....##..#......
...#.#.....#..#.......#..#.#............#
.#.#.....#..##.....#..#..............#...
.#.#....##.....#......##..#...#......#...
.......#..........#.###....#.#...##.#....
.....##.#..#.....#.#.#......#...##..#.#..
.#....#...#.#.#.......##.#.........#.#...
##.........#............#.#......#....#..
.#......#.............#.#......#.........
.......#...##........#...##......#....#..
#..#.....#.#...##.#.#......##...#.#..#...
#....##...#.#........#..........##.......
..#.#.....#.....###.#..#.........#......#
......##.#...#.#..#..#.##..............#.
.......##.#..#.#.............#..#.#......
...#....##.##..#..#..#.....#...##.#......
#....#..#.#....#...###...#.#.......#.....
.#..#...#......##.#..#..#........#....#..
..#.##.#...#......###.....#.#........##..
#.##.###.........#...##.....#..#....#.#..
..........#...#..##..#..##....#.........#
..#..#....###..........##..#...#...#..#..`,
    output: 340
  });

  Utils.check(solve, dataset, "10a");
})();
