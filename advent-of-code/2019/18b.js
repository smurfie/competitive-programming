(() => {
  function solve(input) {
    var map = input.split("\n").map((i) => i.split(""));

    var nodesCoord = [[], [], [], []];
    var paths = [];

    var dict = {};
    var where = {};
    var robots = [];
    var nKeys = 0;
    for (var i = 0; i < map.length; i++) {
      for (var j = 0; j < map[i].length; j++) {
        var el = map[i][j];
        if (el == "@") {
          robots.push([i, j]);
        } else if (isKey(el)) {
          var quad = 0;
          if (i < map.length / 2 && j >= map[0].length / 2) quad = 1;
          else if (i >= map.length / 2 && j < map[0].length / 2) quad = 2;
          else if (i >= map.length / 2 && j >= map[0].length / 2) quad = 3;

          where[keyToi(el)] = [quad, nodesCoord[quad].length];
          nodesCoord[quad].push([i, j]);
          nKeys++;
        }
      }
    }

    for (var i = 0; i < nKeys; i++) {
      var point = where[i];
      paths[i] = findPaths(
        Utils.duplicate(map),
        nodesCoord[point[0]][point[1]]
      );
    }
    for (var i = 0; i < robots.length; i++) {
      paths[nKeys + i] = findPaths(Utils.duplicate(map), robots[i]);
    }

    var arrPathLengths = [];
    for (var path of paths) {
      for (var el in path) {
        if (path[el].steps != 0) {
          arrPathLengths.push(path[el].steps);
        }
      }
    }
    arrPathLengths.sort((a, b) => a - b);
    for (var i = 1; i < arrPathLengths.lengths; i++) {
      arrPathLengths[i] += arrPathLengths[i - 1];
    }

    var min = Infinity;
    var states = new PriorityQueue((a, b) => a.pathSteps - b.pathSteps);
    states.add({
      positions: [nKeys, nKeys + 1, nKeys + 2, nKeys + 3],
      pathSteps: 0,
      collectedKeys: {}
    });

    while (states.size() > 0) {
      var { positions, pathSteps, collectedKeys } = states.pop();
      if (pathSteps >= min) continue;
      if (
        pathSteps +
          arrPathLengths[nKeys - Object.keys(collectedKeys).length - 1] >
        min
      )
        continue;
      var h = hash(positions, collectedKeys);
      if (dict[h] && dict[h] <= pathSteps) continue;
      dict[h] = pathSteps;
      if (Object.keys(collectedKeys).length == nKeys) {
        min = pathSteps;
        continue;
      }
      for (var k = 0; k < positions.length; k++) {
        var pos = positions[k];
        for (var i in paths[pos]) {
          if (pos == i || collectedKeys[i] || !paths[pos][i]) continue;
          var { doors, keys, steps } = paths[pos][i];
          var closed = false;
          for (var j = 0; j < doors.length && !closed; j++) {
            closed = !collectedKeys[doors[j]];
          }
          for (var j = 0; j < keys.length && !closed; j++) {
            closed = !collectedKeys[keys[j]];
          }
          if (closed) continue;
          var newKeys = Utils.duplicate(collectedKeys);
          newKeys[i] = true;
          var newPositions = Utils.duplicate(positions);
          newPositions[k] = i;
          states.add({
            positions: newPositions,
            pathSteps: pathSteps + steps,
            collectedKeys: newKeys
          });
        }
      }
    }

    return min;
  }

  function hash(positions, keys) {
    return (
      positions.join(";") +
      ";" +
      Object.keys(keys)
        .sort((a, b) => a - b)
        .join(";")
    );
  }

  function findPaths(map, arr) {
    var res = {};
    var states = [
      {
        x: arr[0],
        y: arr[1],
        steps: 0,
        doors: [],
        keys: []
      }
    ];
    while (states.length > 0) {
      var { x, y, steps, doors, keys } = states.shift();
      var el = map[x][y];
      if (el != "#") {
        if (isKey(el)) {
          res[keyToi(el)] = {
            steps,
            doors: Utils.duplicate(doors),
            keys: Utils.duplicate(keys)
          };
          keys.push(keyToi(el));
        }
        if (isDoor(el)) {
          doors.push(doorToi(el));
        }
        map[x][y] = "#";
        steps++;
        states.push({
          x: x + 1,
          y,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x: x - 1,
          y,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x,
          y: y + 1,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x,
          y: y - 1,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
      }
    }
    return res;
  }

  function isKey(c) {
    return (
      c.charCodeAt(0) >= "a".charCodeAt(0) &&
      c.charCodeAt(0) <= "z".charCodeAt(0)
    );
  }

  function isDoor(c) {
    return (
      c.charCodeAt(0) >= "A".charCodeAt(0) &&
      c.charCodeAt(0) <= "Z".charCodeAt(0)
    );
  }

  function keyToi(c) {
    return c.charCodeAt(0) - "a".charCodeAt(0);
  }

  function doorToi(c) {
    return c.charCodeAt(0) - "A".charCodeAt(0);
  }

  var dataset = [];

  dataset.push({
    input: `#######
#a.#Cd#
##@#@##
#######
##@#@##
#cB#.b#
#######`,
    output: 8
  });

  dataset.push({
    input: `###############
#d.ABC.#.....a#
######@#@######
###############
######@#@######
#b.....#.....c#
###############`,
    output: 24
  });

  dataset.push({
    input: `#############
#DcBa.#.GhKl#
#.###@#@#I###
#e#d#####j#k#
###C#@#@###J#
#fEbA.#.FgHi#
#############`,
    output: 32
  });

  dataset.push({
    input: `#############
#g#f.D#..h#l#
#F###e#E###.#
#dCba@#@BcIJ#
#############
#nK.L@#@G...#
#M###N#H###.#
#o#m..#i#jk.#
#############`,
    output: 72
  });

  dataset.push({
    input: `#################################################################################
#...#...............#...........#.......#.#...........#..z......#...K........r..#
###.#.#############.#.#.#######.#.###.#.#.#.#####.###.###.#######.#.#############
#...#.#.....#...#...#.#.#.......#...#.#.#.#.....#.#.....C.#.......#.#.....#.....#
#.###.#.###.#.#.#.###.#.###########.#.###.#####.#.#####.###.#######.#.###.#.###.#
#...#.#.#.#b#.#...#...#...........#.#...#.....#.#.....#.#...#.....#.....#...#...#
###.#.#.#.#.#.#####.###########.###.###.#T#####.#####.###.###P###.#########.#.#R#
#...#.#...#.#f....#.....#...#...#...#.#.#.#...#.Y.#...#.....#.#.#..p#a....#.#.#.#
#.#.#.#####.#####.#####.#.#.#.###.###.#.#.#.#.###.#.###.#####.#.###.#.###.#.#.#.#
#.#.#.....#.#.....#...#...#.#.....#...#.#.#.#.#...#.....#.....#...#.#.#.#.#.#.#.#
#.#######.#.#.#######.#####.#######.###.#.#.#.#.#########.#######.#.#.#G#.###.#.#
#..q#.......#.......#.....#.#.......#.U.#.#.#...#....n..#v..#.L...#.#.#.....#.#.#
#.#.#.#######.#####.#.###.#.#.#####.#.#.#.#.###########.###.###.#.#.#.#####.#.#.#
#.#...#.....#...#...#.#...#.#.#.....#.#.#...#...........#.#...#.#.#.#.....#...#.#
#.#####.###.#####.#####.#.#.#.#.#####.#.#.#####.#.#####.#.###.#.###.#.###.#####.#
#.....#.#...#.....#.....#.#...#...#...#.#.#...#.#...#.#.#.#...#.#...#.#.#...#..g#
###X###.#.###.#####.#############.#.###.#.#.#.#####.#.#.#.#.###.#.###.#.###.#####
#...#...#.....#...#...........D...#.#.#.#...#.#.....#...#.#.#.....#...A...#.....#
#.###.#########.#.#.###########.###.#.#.#####.#.#####.###.#.###.#########.#####.#
#...#.#.....#...#.....#...#...#.#...#...#.....#.#...#.#...#...#l#...#.#j..#...#.#
#.###.#.#####.#########.#.#.#.#.#.#####.#.#####.###.#.###.###V#.#.#.#.#.###.#J#.#
#.#...#.....#.#.....#...#...#.#.#...S.#.#...#.....#.#.....#.#.#...#.#.....#.#...#
#.#.###.###.#.#.###.#########.#.#####.#.###.#####.#.#####.#.#######H#######.#####
#.#...#...#.#.#...#...#...#...#.....#.#.#...#.....#.....#.#...#...#........h#...#
#.###I###.#.#.#.###.#.#.#.#.#########.###.###.#######.#.#.#.#.#.#.#############B#
#...#...#.#.#.#.#...#.#.#.#.#.......#...#.....#.......#.#.#.#...#...#...#.......#
###.###.#.#M#.#.#.###.###.#.#.#####.###.#######.#######.#.#.#######.#.#.###.###.#
#.#.#.#.#.#...#.#...#.....#...#.#...#...#...#.....#...#.#...#.....#...#.....#.#.#
#.#.#.#.#.#####.###.###########.#.###.###.#.#.###.###.#.#####.#.#############.#.#
#.#...#.#.....#.#.#...#...........#.#...#.#.#...#.#...#.#...#.#...............#.#
#.###.#.#####.#.#.###.#.###########.#.#.#.#.###.#.#.###.#.###.#########.#####.#.#
#...#.#.#.#...#.#...#.#.#.....#...#...#.#.#...#.#.#.....#.#...#.....#.#...#...#.#
###.#.#.#.#.###.#.###.#.#.###.###.#.###.#####.#.#.#.#####.#.#####.#.#.###.#####.#
#...#.#.#...#...#...#...#.#.#...#.....#.#.....#.#.#.......#.......#.#...#.......#
#.#O#.#.#####.#####.#####.#.###.#.#####.#.###.#.#.#################.###.#########
#.#.#.#...#...#...........#.....#.#...#.#.#...#.#...#.......#.......#.....#.....#
#.#.#.###.#.###.###########.#######.#.#.#.###.#.###.#.###.###.#######.###.###.#.#
#.#.#.#.#...#...#.#.......#...#.....#.#.#...#.#...#.#.#.#.#...#.........#.#...#.#
#.###.#.#######.#.#.#.#######.#.#####.#.#.#.#####.#.#.#.#.#.###########.#.#.###.#
#.........E.....#...#...........#......@#@#.......#....e#...............#...#...#
#################################################################################
#.....#...#.........#...............#..@#@....#...#.............#...#...#...#...#
#.###.#.#.#######.#.###.###########.###.#.#####.#.#.#.#########.#.#.#.#.#.#.###.#
#.#.#...#.....#...#...#...#.....#.#.#...#.......#...#.....#.#...#.#...#.#.#.....#
#.#.#########.#.#####.#.#.#.###.#.#.#.###.###############.#.#.###.#####.#.#####.#
#.#.#...#...#...#.#...#.#.#...#...#.#...#.#.......#...#...#.#.....#.#...#.#x#...#
#.#.#.#.#.#.#####.#.#####.#.#.###.#.###.#.#####.#.#.#.#.###.#######.#.###.#.#.###
#.#...#...#.#...#...#.....#.#...#.#.....#...#...#.#.#.#...#.........#....o#...#.#
#.#####.###.#.#.#.###.#####.###.#######.###.#.###.#.#####.###.#############.###.#
#.#...#.#.#.#.#...#.#.....#.#...#.....#s#...#.#.#.#.....#...#...........#.#.....#
#.#.#.#.#.#.#.#####.#.###.#.#.#.#.###.#.#.###.#.#.###.#.###.#########.#.#.#####.#
#...#.#.#.#...#...#...#...#.#.#.#...#.#.#.....#.......#.#.#.#.........#.......#.#
#.###.#.#.#####.#.#####.#####.#.###.#.#.###.###########.#.#.#.#########.#######.#
#.#.#.#.#.......#.......#.....#.#...#...#...#...#.....#...#.#.#..m......#.....#.#
#.#.#.#.###.#############.#######.#######.###.#.#.###.#.###.#.#.#####.###.###.#.#
#...#.#...#.....#.....#.....#...#.#.....#...#.#.#...#...#...#.#.#...#...#...#...#
###.#.###.#.###.#####.#.###.#.#.#.#.###.#.###.#.#########.###.###.#.#######.#####
#...#.#.#.#...#.....#.#.#.#...#...#...#.#.#...#.......#...#.......#.......#.Q...#
#.###.#.#.#.#######.#.#.#.#############.#.#.#########.#.#########.#######.#####.#
#...#.#...#.#.......#.......#...........#.#.#.......#...#.......#.......#...#...#
###.#.#.###.#.#####.#######.#.#.#######.#.#.#.#####.#####.#.###.#######.###.#.###
#...#.#.#.#.#.#.....#.#...#.#.#.......#.#.#.#.....#.#...#.#.#.#.#.....#...#...#.#
#####.#.#.#.#.###.###.#.#.#.#.#######.###.#.#.#####.#.#.#.###.#.#.#.#.###.#####.#
#...W.#.#...#...#.#...#.#.#.#.......#...#u#...#.....#.#.#.....#.#.#.#.#.#.#.....#
#.#####.###.###.###.#####.#.#######.###.#######.###.#.#.#######.###.#.#.#.#.#####
#.#...#...#.#.#.#...#.....#.#.........#.#...#...#...#.#...#...#.#...#...#.#w....#
#.#.#.###.#.#.#.#.###.#.###.#.#########.#.#.#.#.#####.###.#.#.#.#.#######.###.#.#
#.#.#.#.#.#...#.#.#...#.#...#...#.#.....#.#...#.#...#.#.#...#...#...#...#...#.#.#
#.#.#.#.#.#####.#.#.#####.#####.#.#.###.#.#######.#.#.#.#########.#.#.#.###.###.#
#.#.#.#.........#.#.....#.#...#...#.#...#.#.....#.#.#.....#.....#.#...#...#...#.#
#.#.#.###.#######.#####.#.#.#.###.#.###.#.#.###.#.#.#####.#####.#.#######.###F#.#
#t..#...#.#.......#.....#...#.#...#...#.#.#.#.#.#.#.....#.#.....#...#...#.#...#.#
#.#####.###.#######.#########.#######.#.#.#.#.#.#.###.#.#.#.#######.#N#.#.#.###.#
#.....#...#.#...............#.#.......#.#.#.#.#...#.#.#.#.#.......#...#.#...#...#
#########.#.#####.#####.###.#.#.#######.#.#.#.#####.#.###.#.#####.#####.#####.#.#
#........y#.....#.#...#.#...#.#.#.......#...#.......#.....#.#.....#...#....i..#.#
#.#############.#.#.#.#.###.#.#.#.###########.###.#########.#.#####.#.#########.#
#...#.......#...#.#.#.#...#.#.#.#.#.....#..k#...#.....#c..#.#.....#.#...#.....#.#
#.#.#.#####.#.###.#.#.###.###.#.#.###.#.#.#####.#####.#.#.#.#####.#.###.#.###.#.#
#.#.......#...#.....#...#.......#..d..#.#.......Z...#...#.......#.....#.....#...#
#################################################################################`,
    output: 1732
  });

  Utils.check(solve, dataset, "18b");
})();
