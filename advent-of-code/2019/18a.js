(() => {
  function solve(input) {
    var map = input.split("\n").map((i) => i.split(""));
    var nodesCoord = [];
    var paths = [];

    var dict = {};
    var x = -1;
    var y = -1;
    var nKeys = 0;
    for (var i = 0; i < map.length; i++) {
      for (var j = 0; j < map[i].length; j++) {
        var el = map[i][j];
        if (el == "@") {
          x = i;
          y = j;
        } else if (isKey(el)) {
          nodesCoord[keyToi(el)] = [i, j];
          nKeys++;
        }
      }
    }

    for (var i = 0; i < nKeys; i++) {
      paths[i] = findPaths(Utils.duplicate(map), nodesCoord[i]);
    }
    paths[nKeys] = findPaths(Utils.duplicate(map), [x, y]);

    var min = Infinity;
    var states = new PriorityQueue((a, b) => a.pathSteps - b.pathSteps);
    states.add({
      pos: nKeys,
      pathSteps: 0,
      collectedKeys: {}
    });

    while (states.size() > 0) {
      var { pos, pathSteps, collectedKeys } = states.pop();
      if (pathSteps >= min) continue;
      var h = hash(pos, collectedKeys);
      if (dict[h] && dict[h] <= pathSteps) continue;
      dict[h] = pathSteps;
      if (Object.keys(collectedKeys).length == nKeys) {
        min = pathSteps;
        continue;
      }
      for (var i = 0; i < nKeys; i++) {
        if (pos == i || collectedKeys[i]) continue;
        var { doors, keys, steps } = paths[pos][i];
        var closed = false;
        for (var j = 0; j < doors.length && !closed; j++) {
          closed = !collectedKeys[doors[j]];
        }
        for (var j = 0; j < keys.length && !closed; j++) {
          closed = !collectedKeys[keys[j]];
        }
        if (closed) continue;
        var newKeys = Utils.duplicate(collectedKeys);
        newKeys[i] = true;
        states.add({
          pos: i,
          pathSteps: pathSteps + steps,
          collectedKeys: newKeys
        });
      }
    }
    return min;
  }

  function hash(pos, keys) {
    return (
      pos +
      ";" +
      Object.keys(keys)
        .sort((a, b) => a - b)
        .join(";")
    );
  }

  function findPaths(map, arr) {
    var res = [];
    var states = [
      {
        x: arr[0],
        y: arr[1],
        steps: 0,
        doors: [],
        keys: []
      }
    ];
    while (states.length > 0) {
      var { x, y, steps, doors, keys } = states.shift();
      var el = map[x][y];
      if (el != "#") {
        if (isKey(el)) {
          res[keyToi(el)] = {
            steps,
            doors: Utils.duplicate(doors),
            keys: Utils.duplicate(keys)
          };
          keys.push(keyToi(el));
        }
        if (isDoor(el)) {
          doors.push(doorToi(el));
        }
        map[x][y] = "#";
        steps++;
        states.push({
          x: x + 1,
          y,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x: x - 1,
          y,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x,
          y: y + 1,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
        states.push({
          x,
          y: y - 1,
          steps,
          doors: Utils.duplicate(doors),
          keys: Utils.duplicate(keys)
        });
      }
    }
    return res;
  }

  function isKey(c) {
    return (
      c.charCodeAt(0) >= "a".charCodeAt(0) &&
      c.charCodeAt(0) <= "z".charCodeAt(0)
    );
  }

  function isDoor(c) {
    return (
      c.charCodeAt(0) >= "A".charCodeAt(0) &&
      c.charCodeAt(0) <= "Z".charCodeAt(0)
    );
  }

  function keyToi(c) {
    return c.charCodeAt(0) - "a".charCodeAt(0);
  }

  function doorToi(c) {
    return c.charCodeAt(0) - "A".charCodeAt(0);
  }

  var dataset = [];

  dataset.push({
    input: `#########
#b.A.@.a#
#########`,
    output: 8
  });

  dataset.push({
    input: `########################
#f.D.E.e.C.b.A.@.a.B.c.#
######################.#
#d.....................#
########################`,
    output: 86
  });

  dataset.push({
    input: `########################
#...............b.C.D.f#
#.######################
#.....@.a.B.c.d.A.e.F.g#
########################`,
    output: 132
  });

  dataset.push({
    input: `#################
#i.G..c...e..H.p#
########.########
#j.A..b...f..D.o#
########@########
#k.E..a...g..B.n#
########.########
#l.F..d...h..C.m#
#################`,
    output: 136
  });

  dataset.push({
    input: `########################
#@..............ac.GI.b#
###d#e#f################
###A#B#C################
###g#h#i################
########################`,
    output: 81
  });

  dataset.push({
    input: `#################################################################################
#...#...............#...........#.......#.#...........#..z......#...K........r..#
###.#.#############.#.#.#######.#.###.#.#.#.#####.###.###.#######.#.#############
#...#.#.....#...#...#.#.#.......#...#.#.#.#.....#.#.....C.#.......#.#.....#.....#
#.###.#.###.#.#.#.###.#.###########.#.###.#####.#.#####.###.#######.#.###.#.###.#
#...#.#.#.#b#.#...#...#...........#.#...#.....#.#.....#.#...#.....#.....#...#...#
###.#.#.#.#.#.#####.###########.###.###.#T#####.#####.###.###P###.#########.#.#R#
#...#.#...#.#f....#.....#...#...#...#.#.#.#...#.Y.#...#.....#.#.#..p#a....#.#.#.#
#.#.#.#####.#####.#####.#.#.#.###.###.#.#.#.#.###.#.###.#####.#.###.#.###.#.#.#.#
#.#.#.....#.#.....#...#...#.#.....#...#.#.#.#.#...#.....#.....#...#.#.#.#.#.#.#.#
#.#######.#.#.#######.#####.#######.###.#.#.#.#.#########.#######.#.#.#G#.###.#.#
#..q#.......#.......#.....#.#.......#.U.#.#.#...#....n..#v..#.L...#.#.#.....#.#.#
#.#.#.#######.#####.#.###.#.#.#####.#.#.#.#.###########.###.###.#.#.#.#####.#.#.#
#.#...#.....#...#...#.#...#.#.#.....#.#.#...#...........#.#...#.#.#.#.....#...#.#
#.#####.###.#####.#####.#.#.#.#.#####.#.#.#####.#.#####.#.###.#.###.#.###.#####.#
#.....#.#...#.....#.....#.#...#...#...#.#.#...#.#...#.#.#.#...#.#...#.#.#...#..g#
###X###.#.###.#####.#############.#.###.#.#.#.#####.#.#.#.#.###.#.###.#.###.#####
#...#...#.....#...#...........D...#.#.#.#...#.#.....#...#.#.#.....#...A...#.....#
#.###.#########.#.#.###########.###.#.#.#####.#.#####.###.#.###.#########.#####.#
#...#.#.....#...#.....#...#...#.#...#...#.....#.#...#.#...#...#l#...#.#j..#...#.#
#.###.#.#####.#########.#.#.#.#.#.#####.#.#####.###.#.###.###V#.#.#.#.#.###.#J#.#
#.#...#.....#.#.....#...#...#.#.#...S.#.#...#.....#.#.....#.#.#...#.#.....#.#...#
#.#.###.###.#.#.###.#########.#.#####.#.###.#####.#.#####.#.#######H#######.#####
#.#...#...#.#.#...#...#...#...#.....#.#.#...#.....#.....#.#...#...#........h#...#
#.###I###.#.#.#.###.#.#.#.#.#########.###.###.#######.#.#.#.#.#.#.#############B#
#...#...#.#.#.#.#...#.#.#.#.#.......#...#.....#.......#.#.#.#...#...#...#.......#
###.###.#.#M#.#.#.###.###.#.#.#####.###.#######.#######.#.#.#######.#.#.###.###.#
#.#.#.#.#.#...#.#...#.....#...#.#...#...#...#.....#...#.#...#.....#...#.....#.#.#
#.#.#.#.#.#####.###.###########.#.###.###.#.#.###.###.#.#####.#.#############.#.#
#.#...#.#.....#.#.#...#...........#.#...#.#.#...#.#...#.#...#.#...............#.#
#.###.#.#####.#.#.###.#.###########.#.#.#.#.###.#.#.###.#.###.#########.#####.#.#
#...#.#.#.#...#.#...#.#.#.....#...#...#.#.#...#.#.#.....#.#...#.....#.#...#...#.#
###.#.#.#.#.###.#.###.#.#.###.###.#.###.#####.#.#.#.#####.#.#####.#.#.###.#####.#
#...#.#.#...#...#...#...#.#.#...#.....#.#.....#.#.#.......#.......#.#...#.......#
#.#O#.#.#####.#####.#####.#.###.#.#####.#.###.#.#.#################.###.#########
#.#.#.#...#...#...........#.....#.#...#.#.#...#.#...#.......#.......#.....#.....#
#.#.#.###.#.###.###########.#######.#.#.#.###.#.###.#.###.###.#######.###.###.#.#
#.#.#.#.#...#...#.#.......#...#.....#.#.#...#.#...#.#.#.#.#...#.........#.#...#.#
#.###.#.#######.#.#.#.#######.#.#####.#.#.#.#####.#.#.#.#.#.###########.#.#.###.#
#.........E.....#...#...........#.........#.......#....e#...............#...#...#
#######################################.@.#######################################
#.....#...#.........#...............#.........#...#.............#...#...#...#...#
#.###.#.#.#######.#.###.###########.###.#.#####.#.#.#.#########.#.#.#.#.#.#.###.#
#.#.#...#.....#...#...#...#.....#.#.#...#.......#...#.....#.#...#.#...#.#.#.....#
#.#.#########.#.#####.#.#.#.###.#.#.#.###.###############.#.#.###.#####.#.#####.#
#.#.#...#...#...#.#...#.#.#...#...#.#...#.#.......#...#...#.#.....#.#...#.#x#...#
#.#.#.#.#.#.#####.#.#####.#.#.###.#.###.#.#####.#.#.#.#.###.#######.#.###.#.#.###
#.#...#...#.#...#...#.....#.#...#.#.....#...#...#.#.#.#...#.........#....o#...#.#
#.#####.###.#.#.#.###.#####.###.#######.###.#.###.#.#####.###.#############.###.#
#.#...#.#.#.#.#...#.#.....#.#...#.....#s#...#.#.#.#.....#...#...........#.#.....#
#.#.#.#.#.#.#.#####.#.###.#.#.#.#.###.#.#.###.#.#.###.#.###.#########.#.#.#####.#
#...#.#.#.#...#...#...#...#.#.#.#...#.#.#.....#.......#.#.#.#.........#.......#.#
#.###.#.#.#####.#.#####.#####.#.###.#.#.###.###########.#.#.#.#########.#######.#
#.#.#.#.#.......#.......#.....#.#...#...#...#...#.....#...#.#.#..m......#.....#.#
#.#.#.#.###.#############.#######.#######.###.#.#.###.#.###.#.#.#####.###.###.#.#
#...#.#...#.....#.....#.....#...#.#.....#...#.#.#...#...#...#.#.#...#...#...#...#
###.#.###.#.###.#####.#.###.#.#.#.#.###.#.###.#.#########.###.###.#.#######.#####
#...#.#.#.#...#.....#.#.#.#...#...#...#.#.#...#.......#...#.......#.......#.Q...#
#.###.#.#.#.#######.#.#.#.#############.#.#.#########.#.#########.#######.#####.#
#...#.#...#.#.......#.......#...........#.#.#.......#...#.......#.......#...#...#
###.#.#.###.#.#####.#######.#.#.#######.#.#.#.#####.#####.#.###.#######.###.#.###
#...#.#.#.#.#.#.....#.#...#.#.#.......#.#.#.#.....#.#...#.#.#.#.#.....#...#...#.#
#####.#.#.#.#.###.###.#.#.#.#.#######.###.#.#.#####.#.#.#.###.#.#.#.#.###.#####.#
#...W.#.#...#...#.#...#.#.#.#.......#...#u#...#.....#.#.#.....#.#.#.#.#.#.#.....#
#.#####.###.###.###.#####.#.#######.###.#######.###.#.#.#######.###.#.#.#.#.#####
#.#...#...#.#.#.#...#.....#.#.........#.#...#...#...#.#...#...#.#...#...#.#w....#
#.#.#.###.#.#.#.#.###.#.###.#.#########.#.#.#.#.#####.###.#.#.#.#.#######.###.#.#
#.#.#.#.#.#...#.#.#...#.#...#...#.#.....#.#...#.#...#.#.#...#...#...#...#...#.#.#
#.#.#.#.#.#####.#.#.#####.#####.#.#.###.#.#######.#.#.#.#########.#.#.#.###.###.#
#.#.#.#.........#.#.....#.#...#...#.#...#.#.....#.#.#.....#.....#.#...#...#...#.#
#.#.#.###.#######.#####.#.#.#.###.#.###.#.#.###.#.#.#####.#####.#.#######.###F#.#
#t..#...#.#.......#.....#...#.#...#...#.#.#.#.#.#.#.....#.#.....#...#...#.#...#.#
#.#####.###.#######.#########.#######.#.#.#.#.#.#.###.#.#.#.#######.#N#.#.#.###.#
#.....#...#.#...............#.#.......#.#.#.#.#...#.#.#.#.#.......#...#.#...#...#
#########.#.#####.#####.###.#.#.#######.#.#.#.#####.#.###.#.#####.#####.#####.#.#
#........y#.....#.#...#.#...#.#.#.......#...#.......#.....#.#.....#...#....i..#.#
#.#############.#.#.#.#.###.#.#.#.###########.###.#########.#.#####.#.#########.#
#...#.......#...#.#.#.#...#.#.#.#.#.....#..k#...#.....#c..#.#.....#.#...#.....#.#
#.#.#.#####.#.###.#.#.###.###.#.#.###.#.#.#####.#####.#.#.#.#####.#.###.#.###.#.#
#.#.......#...#.....#...#.......#..d..#.#.......Z...#...#.......#.....#.....#...#
#################################################################################`,
    output: 3048
  });

  Utils.check(solve, dataset, "18a");
})();
