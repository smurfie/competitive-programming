(() => {
  function solve(input, iterations) {
    var start = [
      [".", "#", "."],
      [".", ".", "#"],
      ["#", "#", "#"]
    ];

    var lines = Utils.read(input);
    var rules = {};

    for (var line of lines) {
      var ini = line.split(" => ")[0];
      var end = line.split(" => ")[1];
      for (var mutation of mutations(ini)) rules[mutation] = end;
    }

    var matrix = start;
    for (var i = 0; i < iterations; i++) {
      matrix = iterate(rules, matrix);
    }

    return matrix.reduce(
      (a, b) => a + b.reduce((c, d) => c + (d == "#" ? 1 : 0), 0),
      0
    );
  }

  function toMatrix(str) {
    return str.split("/").map((i) => i.split(""));
  }

  function toStr(matrix) {
    return matrix.map((i) => i.join("")).join("/");
  }

  function iterate(rules, m) {
    var m2 = [];
    if (m.length % 2 == 0) {
      for (var i = 0; i < m.length; i += 2) {
        m2[i / 2] = [];
        for (var j = 0; j < m[i].length; j += 2) {
          m2[i / 2][j / 2] = toMatrix(
            rules[m[i][j] + m[i][j + 1] + "/" + m[i + 1][j] + m[i + 1][j + 1]]
          );
        }
      }
    } else {
      for (var i = 0; i < m.length; i += 3) {
        m2[i / 3] = [];
        for (var j = 0; j < m[i].length; j += 3) {
          m2[i / 3][j / 3] = toMatrix(
            rules[
              m[i][j] +
                m[i][j + 1] +
                m[i][j + 2] +
                "/" +
                m[i + 1][j] +
                m[i + 1][j + 1] +
                m[i + 1][j + 2] +
                "/" +
                m[i + 2][j] +
                m[i + 2][j + 1] +
                m[i + 2][j + 2]
            ]
          );
        }
      }
    }
    var m = [];
    for (var i = 0; i < m2.length; i++) {
      for (var j = 0; j < m2[i].length; j++) {
        for (var i2 = 0; i2 < m2[i][j].length; i2++) {
          if (!m[i * m2[i][j].length + i2]) m[i * m2[i][j].length + i2] = [];
          for (var j2 = 0; j2 < m2[i][j][i2].length; j2++) {
            m[i * m2[i][j].length + i2][j * m2[i][j][i2].length + j2] =
              m2[i][j][i2][j2];
          }
        }
      }
    }
    return m;
  }

  function mutations(str) {
    var matrix = toMatrix(str);
    var m = [];

    if (matrix.length == 2) {
      for (var i = 0; i < 4; i++) {
        var m2 = Utils.duplicate(matrix);
        m2[0][0] = matrix[1][0];
        m2[0][1] = matrix[0][0];
        m2[1][1] = matrix[0][1];
        m2[1][0] = matrix[1][1];
        matrix = m2;
        m.push(toStr(matrix));
      }
    } else {
      for (var i = 0; i < 4; i++) {
        var m2 = Utils.duplicate(matrix);
        m2[0][0] = matrix[2][0];
        m2[0][1] = matrix[1][0];
        m2[0][2] = matrix[0][0];
        m2[1][2] = matrix[0][1];
        m2[2][2] = matrix[0][2];
        m2[2][1] = matrix[1][2];
        m2[2][0] = matrix[2][2];
        m2[1][0] = matrix[2][1];
        matrix = m2;
        m.push(toStr(matrix));
      }
      tmp = matrix[0];
      matrix[0] = matrix[2];
      matrix[2] = tmp;
      for (var i = 0; i < 4; i++) {
        var m2 = Utils.duplicate(matrix);
        m2[0][0] = matrix[2][0];
        m2[0][1] = matrix[1][0];
        m2[0][2] = matrix[0][0];
        m2[1][2] = matrix[0][1];
        m2[2][2] = matrix[0][2];
        m2[2][1] = matrix[1][2];
        m2[2][0] = matrix[2][2];
        m2[1][0] = matrix[2][1];
        matrix = m2;
        m.push(toStr(matrix));
      }
    }
    return m;
  }

  var dataset = [];

  dataset.push({
    input: `../.# => ##./#../...
.#./..#/### => #..#/..../..../#..#`,
    iterations: 2,
    output: 12
  });

  dataset.push({
    input: `../.. => .#./.../###
#./.. => .#./##./#..
##/.. => #.#/#../###
.#/#. => ##./..#/###
##/#. => .#./#../..#
##/## => #../..#/#.#
.../.../... => .###/.#.#/.###/##.#
#../.../... => .##./##../##../#.##
.#./.../... => .#.#/#.#./..#./..#.
##./.../... => ###./#.##/...#/#.##
#.#/.../... => .#.#/.#../.###/.###
###/.../... => ..##/#.#./..../##.#
.#./#../... => #.../..../..../....
##./#../... => ...#/..#./.###/#.#.
..#/#../... => #.../#.##/###./##..
#.#/#../... => .##./#..#/#..#/..##
.##/#../... => .#.#/#.##/..##/.#.#
###/#../... => #.#./.###/..#./#.#.
.../.#./... => #..#/..../.##./.#.#
#../.#./... => .#../.##./.#.#/...#
.#./.#./... => ##.#/...#/.##./...#
##./.#./... => ..#./#.#./#.##/####
#.#/.#./... => ..##/#..#/.###/....
###/.#./... => .#../#..#/#.../..#.
.#./##./... => ..##/#.#./####/###.
##./##./... => ...#/.#../####/#..#
..#/##./... => ..##/##../###./....
#.#/##./... => ..##/#.../.#../.##.
.##/##./... => #.../##../#.##/...#
###/##./... => .#../####/#.##/#.##
.../#.#/... => #..#/####/###./#.#.
#../#.#/... => #.../##.#/#.../.#..
.#./#.#/... => ##.#/##.#/..#./..#.
##./#.#/... => .###/..#./.#../.###
#.#/#.#/... => .###/##../..#./..#.
###/#.#/... => ##../.#../.#../.#..
.../###/... => ..#./#.#./..#./#..#
#../###/... => ..../#.#./##.#/..##
.#./###/... => ..#./#.#./..##/.#..
##./###/... => .##./..##/#..#/#.#.
#.#/###/... => ###./###./#.##/..##
###/###/... => ##.#/..../.##./.#..
..#/.../#.. => .###/####/..../##.#
#.#/.../#.. => ##../###./#..#/...#
.##/.../#.. => ###./#..#/###./...#
###/.../#.. => #.../#..#/##.#/.##.
.##/#../#.. => ..##/####/..##/#...
###/#../#.. => #.../..../...#/..##
..#/.#./#.. => ####/#.#./..../.#.#
#.#/.#./#.. => .##./.#.#/##.#/.##.
.##/.#./#.. => ###./.#.#/###./##.#
###/.#./#.. => #.##/..##/#.#./##.#
.##/##./#.. => ..../..##/#.#./.##.
###/##./#.. => #.#./#..#/#..#/###.
#../..#/#.. => ..../####/#..#/.###
.#./..#/#.. => .###/#.../#.../#.##
##./..#/#.. => ####/##.#/###./####
#.#/..#/#.. => .#../##.#/#..#/#..#
.##/..#/#.. => ..##/##.#/#.##/###.
###/..#/#.. => ##.#/####/##.#/.#..
#../#.#/#.. => .###/#..#/.##./.###
.#./#.#/#.. => #.##/.##./.#../..#.
##./#.#/#.. => ###./..#./.##./##..
..#/#.#/#.. => .###/.#.#/#.#./##..
#.#/#.#/#.. => #..#/.###/.##./....
.##/#.#/#.. => ###./.###/#.##/.###
###/#.#/#.. => ####/.###/..../.##.
#../.##/#.. => ##.#/..../#.../..#.
.#./.##/#.. => #.../..../...#/###.
##./.##/#.. => ###./.#../..##/...#
#.#/.##/#.. => #.../...#/..#./.###
.##/.##/#.. => ###./..../##.#/...#
###/.##/#.. => ##.#/##../###./.##.
#../###/#.. => ..#./#.../..##/#.##
.#./###/#.. => ...#/.##./.#../.#..
##./###/#.. => ##.#/.#.#/###./....
..#/###/#.. => #.##/#.../####/.##.
#.#/###/#.. => .#.#/...#/#..#/..#.
.##/###/#.. => .##./#..#/#..#/.#.#
###/###/#.. => ###./####/#.##/#...
.#./#.#/.#. => ###./#..#/...#/...#
##./#.#/.#. => #.#./#.##/#.../#..#
#.#/#.#/.#. => .#.#/#.##/..../.#..
###/#.#/.#. => #.#./.#../.###/#.#.
.#./###/.#. => #.../.###/##../##.#
##./###/.#. => .###/#.../####/.#.#
#.#/###/.#. => #..#/####/#.#./#...
###/###/.#. => .#../..../.##./.#.#
#.#/..#/##. => ##../###./...#/###.
###/..#/##. => .##./###./.###/#.##
.##/#.#/##. => ..../##.#/#..#/#...
###/#.#/##. => .###/##../..../..#.
#.#/.##/##. => ####/.###/##../...#
###/.##/##. => #.##/..##/..#./#..#
.##/###/##. => ..../#.##/#.../#.##
###/###/##. => ..../#..#/#.##/#.##
#.#/.../#.# => #.../##.#/..../.#.#
###/.../#.# => ##../##../#.#./.##.
###/#../#.# => .##./.#../#.##/.##.
#.#/.#./#.# => #.../.#../####/#.##
###/.#./#.# => .###/##.#/#.../#.#.
###/##./#.# => .##./.##./.###/.#.#
#.#/#.#/#.# => ####/####/###./.##.
###/#.#/#.# => #.#./.###/...#/.#.#
#.#/###/#.# => .###/..#./..../.##.
###/###/#.# => #.#./##.#/..#./..#.
###/#.#/### => ###./#.../##../##..
###/###/### => ##.#/.#.#/#.#./...#`,
    iterations: 5,
    output: 176
  });

  Utils.check(solve, dataset, "21a");
})();
