@file:Suppress("NOTHING_TO_INLINE", "EXPERIMENTAL_FEATURE_WARNING", "OVERRIDE_BY_INLINE")

import java.io.File
import java.io.PrintWriter
import java.util.StringTokenizer
import kotlin.math.*
import kotlin.random.*
import kotlin.collections.sort as _sort
import kotlin.collections.sortDescending as _sortDescending
import kotlin.io.println as iprintln

fun main(args: Array<String>) {
  _writer.solve(); _writer.flush()
}

fun PrintWriter.solve() {
  val n = readInt()
  val arrA = readIntArray(n)
  val arrB = readIntArray(n)

  arrB.shuffle()
  var tree = BinTree()
  arrB.forEach { tree.add(it) }

  var sol = IntArray(n)
  for (i in 0 until n) {
    var el = arrA[i]
    var min = tree.searchNext(0)
    var min2 = tree.searchNext(n - el)
    if (min2 != null && (el + min2) % n < (el + min!!) % n) min = min2
    tree.del(min!!)
    sol[i] = (el + min) % n
  }
  println(sol.joinToString(" "))
}

class Node(value: Int) {
  var value: Int = value
  var times = 1
  var left: Node? = null
  var right: Node? = null
}

class BinTree {
  private var root: Node? = null

  fun add(n: Int) {
    if (root == null) {
      root = Node(n)
    } else {
      var act = root!!
      var next = if (act.value < n) act.right else act.left
      while (next != null && act.value != n) {
        act = next
        next = if (act.value < n) act.right else act.left
      }
      if (act.value == n) {
        act.times++
      } else if (act.value < n) act.right = Node(n)
      else act.left = Node(n)
    }
  }

  fun del(n: Int) {
    var act = root!!
    var parent: Node? = null
    while (act.value != n) {
      parent = act
      act = if (act.value < n) act.right!! else act.left!!
    }
    if (act.times > 1) act.times--
    else if (act.right == null) {
      if (parent == null) {
        root = act.left
      } else if (parent.left?.value==act.value){
        parent.left = act.left
      } else {
        parent.right = act.left
      }
    } else {
      var act2 = act.right!!
      var parent2 = act
      while (act2.left != null) {
        parent2 = act2
        act2 = act2.left!!
      }
      if (parent2.left?.value == act2.value) {
        parent2.left = act2.right
      } else {
        parent2.right = act2.right
      }
      act.value = act2.value
      act.times = act2.times

    }
  }

  fun searchNext(n: Int): Int? {
    var act = root
    var best: Int? = null
    while (act != null) {
      if (act.value == n) return n
      if (act.value < n) act = act.right
      else {
        best = act.value
        act = act.left
      }
    }
    return best
  }
}

/** IO code start */
//@JvmField val INPUT = File(ClassLoader.getSystemResource("input.txt").file).inputStream()
//@JvmField val OUTPUT = File(ClassLoader.getSystemResource("output.txt").file).outputStream()
@JvmField
val INPUT = System.`in`

@JvmField
val OUTPUT = System.out

@JvmField
val _reader = INPUT.bufferedReader()
fun readLine(): String? = _reader.readLine()
fun readLn() = _reader.readLine()!!

@JvmField
var _tokenizer: StringTokenizer = StringTokenizer("")
fun read(): String {
  while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return "", " ")
  return _tokenizer.nextToken()
}

fun readInt() = read().toInt()
fun readDouble() = read().toDouble()
fun readLong() = read().toLong()
fun readStrings(n: Int) = List(n) { read() }
fun readLines(n: Int) = List(n) { readLn() }
fun readInts(n: Int) = List(n) { read().toInt() }
fun readIntArray(n: Int) = IntArray(n) { read().toInt() }
fun readDoubles(n: Int) = List(n) { read().toDouble() }
fun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }
fun readLongs(n: Int) = List(n) { read().toLong() }
fun readLongArray(n: Int) = LongArray(n) { read().toLong() }

@JvmField
val _writer = PrintWriter(OUTPUT, false)

/** shuffles and sort overrides to avoid quicksort attacks */
private inline fun <T> _shuffle(rnd: Random, get: (Int) -> T, set: (Int, T) -> Unit, size: Int) {
  // Fisher-Yates shuffle algorithm
  for (i in size - 1 downTo 1) {
    val j = rnd.nextInt(i + 1)
    val temp = get(i)
    set(i, get(j))
    set(j, temp)
  }
}

@JvmField
var _random: Random? = null
val random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }

fun IntArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun IntArray.sort() {
  shuffle(); _sort()
}

fun IntArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun LongArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun LongArray.sort() {
  shuffle(); _sort()
}

fun LongArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun DoubleArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun DoubleArray.sort() {
  shuffle(); _sort()
}

fun DoubleArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun CharArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
inline fun CharArray.sort() {
  _sort()
}

inline fun CharArray.sortDescending() {
  _sortDescending()
}

inline fun <T : Comparable<T>> Array<out T>.sort() = _sort()
inline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()
inline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()
inline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()

fun `please stop removing these imports IntelliJ`() {
  iprintln(max(1, 2))
}