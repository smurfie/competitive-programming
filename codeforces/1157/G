@file:Suppress("NOTHING_TO_INLINE", "EXPERIMENTAL_FEATURE_WARNING", "OVERRIDE_BY_INLINE")

import com.sun.xml.internal.fastinfoset.util.StringArray
import java.io.File
import java.io.PrintWriter
import java.util.StringTokenizer
import kotlin.math.*
import kotlin.random.*
import kotlin.collections.sort as _sort
import kotlin.collections.sortDescending as _sortDescending
import kotlin.io.println as iprintln

fun main(args: Array<String>) {
  _writer.solve(); _writer.flush()
}

fun PrintWriter.solve() {
  var (n, m) = readIntArray(2)
  var matrix = arrayOfNulls<BooleanArray>(n)
  for (i in 0 until n) matrix[i] = readBooleanArray((m))

  var perms = ArrayList<BooleanArray>()

  for (i in 0 until m) {
    var s = BooleanArray(m+1)
    for (j in 0 until m) {
      s[j] = (j > i).xor(matrix[0]!![j])
    }
    s[m]=s[m-1].xor(matrix[0]!![m-1])
    perms.add(s)
  }

  for (i in 0 until m) {
    var s = BooleanArray(m+1)
    for (j in 0 until m) {
      s[j] = !(j > i).xor(matrix[0]!![j])
    }
    s[m]=!s[m-1].xor(matrix[0]!![m-1])
    perms.add(s)
  }

  var perm: BooleanArray? = null
  var switchs = BooleanArray(n)
  var isValid = true
  for (j in 0 until perms.size) {
    switchs = BooleanArray(n)
    perm = perms[j]
    switchs[0] = perm[m]!=(matrix[0]!![m-1].xor(perm[m-1]))
    isValid = true
    for (i in 1 until n) {
      isValid = checkValid(perm, matrix[i]!!)
      switchs[i] = perm[m]!=(matrix[i]!![m-1].xor(perm[m-1]))
      if (!isValid) break
    }
    if (isValid) break;
  }

  if (isValid) {
    println("YES")
    println(switchs.joinToString("",transform= { if (it) "1" else "0"}))
    println(perm?.joinToString("",transform= { if (it) "1" else "0"})?.dropLast(1))
  }
  else println("NO")
}

fun checkValid(perm: BooleanArray, arr: BooleanArray): Boolean {
  var change = perm[perm.size-1];
  var value = perm[0].xor(arr[0]);
  for (i in 1 until arr.size) {
    var newValue = perm[i].xor(arr[i])
    if (newValue != value) {
      if (change) return false
      change = true
      perm[perm.size-1] = true
    }
    value = newValue
  }
  return true;
}

/** IO code start */
//@JvmField val INPUT = File(ClassLoader.getSystemResource("input.txt").file).inputStream()
//@JvmField val OUTPUT = File(ClassLoader.getSystemResource("output.txt").file).outputStream()
@JvmField
val INPUT = System.`in`

@JvmField
val OUTPUT = System.out

@JvmField
val _reader = INPUT.bufferedReader()
fun readLine(): String? = _reader.readLine()
fun readLn() = _reader.readLine()!!

@JvmField
var _tokenizer: StringTokenizer = StringTokenizer("")
fun read(): String {
  while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return "", " ")
  return _tokenizer.nextToken()
}

fun readInt() = read().toInt()
fun readDouble() = read().toDouble()
fun readLong() = read().toLong()
fun readStrings(n: Int) = List(n) { read() }
fun readLines(n: Int) = List(n) { readLn() }
fun readInts(n: Int) = List(n) { read().toInt() }
fun readBooleanArray(n: Int) = BooleanArray(n) { read() == "1" }
fun readIntArray(n: Int) = IntArray(n) { read().toInt() }
fun readDoubles(n: Int) = List(n) { read().toDouble() }
fun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }
fun readLongs(n: Int) = List(n) { read().toLong() }
fun readLongArray(n: Int) = LongArray(n) { read().toLong() }

@JvmField
val _writer = PrintWriter(OUTPUT, false)

/** shuffles and sort overrides to avoid quicksort attacks */
private inline fun <T> _shuffle(rnd: Random, get: (Int) -> T, set: (Int, T) -> Unit, size: Int) {
  // Fisher-Yates shuffle algorithm
  for (i in size - 1 downTo 1) {
    val j = rnd.nextInt(i + 1)
    val temp = get(i)
    set(i, get(j))
    set(j, temp)
  }
}

@JvmField
var _random: Random? = null
val random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }

fun IntArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun IntArray.sort() {
  shuffle(); _sort()
}

fun IntArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun LongArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun LongArray.sort() {
  shuffle(); _sort()
}

fun LongArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun DoubleArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun DoubleArray.sort() {
  shuffle(); _sort()
}

fun DoubleArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun CharArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
inline fun CharArray.sort() {
  _sort()
}

inline fun CharArray.sortDescending() {
  _sortDescending()
}

inline fun <T : Comparable<T>> Array<out T>.sort() = _sort()
inline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()
inline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()
inline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()

fun `please stop removing these imports IntelliJ`() {
  iprintln(max(1, 2))
}