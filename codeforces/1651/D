@file:Suppress("NOTHING_TO_INLINE", "EXPERIMENTAL_FEATURE_WARNING", "OVERRIDE_BY_INLINE")

import java.io.File
import java.io.PrintWriter
import java.util.StringTokenizer
import kotlin.math.*
import kotlin.random.*
import kotlin.collections.sort as _sort
import kotlin.collections.sortDescending as _sortDescending
import kotlin.io.println as iprintln

fun main(args: Array<String>) {
  _writer.solve(); _writer.flush()
}

fun PrintWriter.solve() {
  var n = readInt()
  var arr = Array(n) { IntArray(2) }
  var hash = HashSet<String>(n)
  for (i in 0 until n) {
    arr[i] = readIntArray(2)
    hash.add(arr[i].joinToString(" "))
  }
  var dpStr = HashMap<String, String>(n)
  var queue = ArrayDeque<IntArray>(n)

  for (i in 0 until n) {
    var node = arr[i]
    var nodeStr = node.joinToString(" ")
    var node2 = arrayOf(node[0] + 1, node[1])
    var node2Str = node2.joinToString(" ")
    var node3 = arrayOf(node[0] - 1, node[1])
    var node3Str = node3.joinToString(" ")
    var node4 = arrayOf(node[0], node[1] + 1)
    var node4Str = node4.joinToString(" ")
    var node5 = arrayOf(node[0], node[1] - 1)
    var node5Str = node5.joinToString(" ")
    if (!hash.contains(node2Str)) {
      dpStr[nodeStr] = node2Str
      queue.add(node)
    } else if (!hash.contains(node3Str)) {
      dpStr[nodeStr] = node3Str
      queue.add(node)
    } else if (!hash.contains(node4Str)) {
      dpStr[nodeStr] = node4Str
      queue.add(node)
    } else if (!hash.contains(node5Str)) {
      dpStr[nodeStr] = node5Str
      queue.add(node)
    }
  }

  while (queue.isNotEmpty()) {
    var node = queue.removeFirst()
    var nodeStr = node.joinToString(" ")
    var node2 = arrayOf(node[0] + 1, node[1]).toIntArray()
    var node2Str = node2.joinToString(" ")
    var node3 = arrayOf(node[0] - 1, node[1]).toIntArray()
    var node3Str = node3.joinToString(" ")
    var node4 = arrayOf(node[0], node[1] + 1).toIntArray()
    var node4Str = node4.joinToString(" ")
    var node5 = arrayOf(node[0], node[1] - 1).toIntArray()
    var node5Str = node5.joinToString(" ")

    var str = dpStr[nodeStr]!!

    if (hash.contains(node2Str) && !dpStr.containsKey(node2Str)) {
      dpStr[node2Str] = str
      queue.add(node2)
    }
    if (hash.contains(node3Str) && !dpStr.containsKey(node3Str)) {
      dpStr[node3Str] = str
      queue.add(node3)
    }
    if (hash.contains(node4Str) && !dpStr.containsKey(node4Str)) {
      dpStr[node4Str] = str
      queue.add(node4)
    }
    if (hash.contains(node5Str) && !dpStr.containsKey(node5Str)) {
      dpStr[node5Str] = str
      queue.add(node5)
    }
  }

  for (i in 0 until n) {
    println(dpStr[arr[i].joinToString(" ")])
  }

}

/** IO code start */
//@JvmField val INPUT = File(ClassLoader.getSystemResource("input.txt").file).inputStream()
//@JvmField val OUTPUT = File(ClassLoader.getSystemResource("output.txt").file).outputStream()
@JvmField
val INPUT = System.`in`

@JvmField
val OUTPUT = System.out

@JvmField
val _reader = INPUT.bufferedReader()
fun readLine(): String? = _reader.readLine()
fun readLn() = _reader.readLine()!!

@JvmField
var _tokenizer: StringTokenizer = StringTokenizer("")
fun read(): String {
  while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return "", " ")
  return _tokenizer.nextToken()
}

fun readInt() = read().toInt()
fun readDouble() = read().toDouble()
fun readLong() = read().toLong()
fun readStrings(n: Int) = List(n) { read() }
fun readLines(n: Int) = List(n) { readLn() }
fun readInts(n: Int) = List(n) { read().toInt() }
fun readIntArray(n: Int) = IntArray(n) { read().toInt() }
fun readDoubles(n: Int) = List(n) { read().toDouble() }
fun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }
fun readLongs(n: Int) = List(n) { read().toLong() }
fun readLongArray(n: Int) = LongArray(n) { read().toLong() }

@JvmField
val _writer = PrintWriter(OUTPUT, false)

/** shuffles and sort overrides to avoid quicksort attacks */
private inline fun <T> _shuffle(rnd: Random, get: (Int) -> T, set: (Int, T) -> Unit, size: Int) {
  // Fisher-Yates shuffle algorithm
  for (i in size - 1 downTo 1) {
    val j = rnd.nextInt(i + 1)
    val temp = get(i)
    set(i, get(j))
    set(j, temp)
  }
}

@JvmField
var _random: Random? = null
val random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }

fun IntArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun IntArray.sort() {
  shuffle(); _sort()
}

fun IntArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun LongArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun LongArray.sort() {
  shuffle(); _sort()
}

fun LongArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun DoubleArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun DoubleArray.sort() {
  shuffle(); _sort()
}

fun DoubleArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun CharArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
inline fun CharArray.sort() {
  _sort()
}

inline fun CharArray.sortDescending() {
  _sortDescending()
}

inline fun <T : Comparable<T>> Array<out T>.sort() = _sort()
inline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()
inline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()
inline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()

fun `please stop removing these imports IntelliJ`() {
  iprintln(max(1, 2))
}