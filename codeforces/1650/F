@file:Suppress("NOTHING_TO_INLINE", "EXPERIMENTAL_FEATURE_WARNING", "OVERRIDE_BY_INLINE")

import java.io.File
import java.io.PrintWriter
import java.util.StringTokenizer
import kotlin.math.*
import kotlin.random.*
import kotlin.collections.sort as _sort
import kotlin.collections.sortDescending as _sortDescending
import kotlin.io.println as iprintln

fun main(args: Array<String>) {
  _writer.solve(); _writer.flush()
}

fun PrintWriter.solve() {
  var tests = readInt()
  for (i in 1..tests) {
    solveTest()
  }
}

fun solveTest() {
  var (n, m) = readIntArray(2)
  var arr = readIntArray(n)
  var arr2 = Array<MutableList<IntArray>>(n) { mutableListOf() }

  for (i in 1..m) {
    arr2[readInt() - 1].add(readIntArray(2).plus(i))
  }

  var sol = mutableListOf<Int>()
  var time = 0;
  for (i in arr2.indices) {
    var dp = Array<IntArray>(arr2[i].size + 1) { IntArray(101) { (1E9 + 1).toInt() } }
    dp[0][0] = 0
    for (j in arr2[i].indices) {
      dp[j + 1] = dp[j].clone()
      var (t, p, _) = arr2[i][j]
      for (k in dp[j].indices) {
        var idxk = 100.coerceAtMost(k + p)
        dp[j + 1][idxk] = dp[j + 1][idxk].coerceAtMost(dp[j][k] + t)
      }
    }
    time += dp[arr2[i].size][100]

    if (time > arr[i]) {
      iprintln("-1")
      return
    }
    var idxDp = 100
    for (j in arr2[i].size - 1 downTo 0) {
      var (t, p, idx) = arr2[i][j]
      if (dp[j + 1][idxDp] != dp[j][idxDp]) {
        sol.add(idx)
        for (k in dp[j].indices) {
          var idxk = 100.coerceAtMost(k + p)
          if (idxk == idxDp && dp[j][k] + t == dp[j + 1][idxk]) {
            idxDp = k
            break;
          }
        }
      }
    }
  }
  iprintln(sol.size)
  iprintln(sol.joinToString(" "))

}

/** IO code start */
//@JvmField val INPUT = File(ClassLoader.getSystemResource("input.txt").file).inputStream()
//@JvmField val OUTPUT = File(ClassLoader.getSystemResource("output.txt").file).outputStream()
@JvmField
val INPUT = System.`in`

@JvmField
val OUTPUT = System.out

@JvmField
val _reader = INPUT.bufferedReader()
fun readLine(): String? = _reader.readLine()
fun readLn() = _reader.readLine()!!

@JvmField
var _tokenizer: StringTokenizer = StringTokenizer("")
fun read(): String {
  while (_tokenizer.hasMoreTokens().not()) _tokenizer = StringTokenizer(_reader.readLine() ?: return "", " ")
  return _tokenizer.nextToken()
}

fun readInt() = read().toInt()
fun readDouble() = read().toDouble()
fun readLong() = read().toLong()
fun readStrings(n: Int) = List(n) { read() }
fun readLines(n: Int) = List(n) { readLn() }
fun readInts(n: Int) = List(n) { read().toInt() }
fun readIntArray(n: Int) = IntArray(n) { read().toInt() }
fun readDoubles(n: Int) = List(n) { read().toDouble() }
fun readDoubleArray(n: Int) = DoubleArray(n) { read().toDouble() }
fun readLongs(n: Int) = List(n) { read().toLong() }
fun readLongArray(n: Int) = LongArray(n) { read().toLong() }

@JvmField
val _writer = PrintWriter(OUTPUT, false)

/** shuffles and sort overrides to avoid quicksort attacks */
private inline fun <T> _shuffle(rnd: Random, get: (Int) -> T, set: (Int, T) -> Unit, size: Int) {
  // Fisher-Yates shuffle algorithm
  for (i in size - 1 downTo 1) {
    val j = rnd.nextInt(i + 1)
    val temp = get(i)
    set(i, get(j))
    set(j, temp)
  }
}

@JvmField
var _random: Random? = null
val random get() = _random ?: Random(0x594E215C123 * System.nanoTime()).also { _random = it }

fun IntArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun IntArray.sort() {
  shuffle(); _sort()
}

fun IntArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun LongArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun LongArray.sort() {
  shuffle(); _sort()
}

fun LongArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun DoubleArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
fun DoubleArray.sort() {
  shuffle(); _sort()
}

fun DoubleArray.sortDescending() {
  shuffle(); _sortDescending()
}

fun CharArray.shuffle(rnd: Random = random) = _shuffle(rnd, ::get, ::set, size)
inline fun CharArray.sort() {
  _sort()
}

inline fun CharArray.sortDescending() {
  _sortDescending()
}

inline fun <T : Comparable<T>> Array<out T>.sort() = _sort()
inline fun <T : Comparable<T>> Array<out T>.sortDescending() = _sortDescending()
inline fun <T : Comparable<T>> MutableList<out T>.sort() = _sort()
inline fun <T : Comparable<T>> MutableList<out T>.sortDescending() = _sortDescending()

fun `please stop removing these imports IntelliJ`() {
  iprintln(max(1, 2))
}